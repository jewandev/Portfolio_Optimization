KOSPI200_tilt %>%
ggplot(aes(x = reorder(종목명, -시가총액비중), y = 차이)) +
geom_point() +
geom_hline(aes(yintercept = 0.005), color = 'red') +
geom_hline(aes(yintercept = -0.005), color = 'red') +
xlab('종목명') +
ylab('비중 차이(%)') +
scale_x_discrete(breaks = KOSPI200[seq(1, 200, by = 5), '종목명']) +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 60, hjust = 1, family = 'AppleGothic'),
axis.title = element_text(family = 'AppleGothic'))
# 비중 차이 제약 추가
KOSPI200_tilt = KOSPI200_tilt %>%
mutate_at(vars(투자비중), list(~ifelse(차이 < -0.005, 시가총액비중 - 0.005, 투자비중))) %>%
mutate_at(vars(투자비중), list(~ifelse(차이 > 0.005, 시가총액비중 + 0.005, 투자비중))) %>%
mutate(투자비중 = 투자비중 / sum(투자비중),
차이 = 투자비중 - 시가총액비중)
head(KOSPI200_tilt)
# 모든 종목의 차이가 50bp 이내가 될때까지 해당 작업 반복하도록 설정
while (max(abs(KOSPI200_tilt$차이)) > (0.005 + 0.00001)) {
KOSPI200_tilt = KOSPI200_tilt %>%
mutate_at(vars(투자비중), list(~ifelse(차이 < -0.005, 시가총액비중 - 0.005, 투자비중))) %>%
mutate_at(vars(투자비중), list(~ifelse(차이 > 0.005, 시가총액비중 + 0.005, 투자비중))) %>%
mutate(투자비중 = 투자비중 / sum(투자비중),
차이 = 투자비중 - 시가총액비중)
}
head(KOSPI200_tilt)
# 제약 만족 후 차이 부분 시각화
KOSPI200_tilt %>%
ggplot(aes(x = reorder(종목명, -시가총액비중), y = 차이)) +
geom_point() +
geom_hline(aes(yintercept = 0.005), color = 'red') +
geom_hline(aes(yintercept = -0.005), color = 'red') +
xlab('종목명') +
ylab('비중 차이(%)') +
scale_x_discrete(breaks = KOSPI200[seq(1, 200, by = 5), '종목명']) +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 60, hjust = 1, family = 'AppleGothic'),
axis.title = element_text(family = 'AppleGothic'))
# 벤치마크 지수와의 투자 비중 차이 시각화
KOSPI200 %>%
ggplot(aes(x = reorder(종목명, -시가총액비중), y = 시가총액비중)) +
geom_point() +
geom_point(data = KOSPI200_tilt, aes(x = reorder(종목명, -시가총액비중), y = 투자비중),
color = 'red', shape = 4) +
xlab('종목명') +
ylab('비중(%)') +
coord_cartesian(ylim = c(0, 0.03)) +
scale_x_discrete(breaks = KOSPI200[seq(1, 200, by = 5), '종목명']) +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 60, hjust = 1, family = 'AppleGothic'),
axis.title = element_text(family = 'AppleGothic'))
# PBR에 따른 비중 차이
KOSPI200_tilt_mod = KOSPI200_tilt %>% arrange(PBR)
KOSPI200_tilt_mod %>%
ggplot(aes(x = reorder(종목명, PBR), y = 차이)) +
geom_point() +
geom_col(aes(x = reorder(종목명, PBR), y = PBR /2000), fill = 'blue', alpha = 0.2) +
xlab('종목명') +
ylab('차이(%)') +
scale_y_continuous(labels = scales::percent,
sec.axis = sec_axis(~. * 2000, name = "PBR")) +
scale_x_discrete(breaks = KOSPI200_mod[seq(1, 200, by = 10), '종목명']) +
theme(axis.text.x = element_text(angle = 60, hjust = 1, family = 'AppleGothic'),
axis.title = element_text(family = 'AppleGothic'))
# 포트폴리오 백테스트 ----
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
ticker = c('SPY', 'TLT')
getSymbols(ticker)
prices = do.call(cbind,
lapply(ticker, function(x) Ad(get(x))))
rets = Return.calculate(prices) %>% na.omit()
cor(rets)
portfolio = Return.portfolio(R = rets,
weights = c(0.6, 0.4),
rebalance_on = 'years',
verbose = TRUE)
portfolios = cbind(rets, portfolio$returns) %>%
setNames(c('주식', '채권', '60대 40'))
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오', text_content(fam))
theme_classic(base_family = 'AppleGothic')
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오', text_content(fam))
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오', text_content(fam))+
theme_classic(base_family = 'AppleGothic')
theme_classic(base_family = 'AppleGothic')
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오',
theme_classic(base_family = 'AppleGothic'))
charts.PerformanceSummary(portfolios, family = 'AppleGothic')
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오', #text(fam))
theme_classic(base_family = 'AppleGothic')
)
charts.PerformanceSummary(portfolios, family = 'AppleGothic')
charts.PerformanceSummary(portfolios, main = '60대 40 포트폴리오', family = 'AppleGothic')
charts.PerformanceSummary(portfolios, main = '60대 40 포트폴리오', par(family = 'AppleGothic'))
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오')
par(family='AppleGothic')
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오')+
par(family='AppleGothic')
turnover = xts(
rowSums(abs(portfolio$BOP.Weight -
timeSeries::lag(portfolio$EOP.Weight)),
na.rm = TRUE),
order.by = index(portfolio$BOP.Weight))
chart.TimeSeries(turnover)
###시점 선택전략 백테스트
# 단순 매수 후 보유 대비 극심한 하락장에서 낙폭을 줄일 수 있음
# -> 위험 대비 수익률 올릴 수 있음
# 리밸런싱 매월 실행
library(quantmod)
library(PerformanceAnalytics)
symbols = c('SPY', 'SHY')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x))))
rets = na.omit(Return.calculate(prices))
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x))))
rets = na.omit(Return.calculate(prices))
ep = endpoints(rets, on = 'months')
print(ep)
wts = list()
lookback = 10
i = lookback + 1
sub_price = prices[ep[i-lookback] : ep[i] , 1]
head(sub_price, 3)
tail(sub_price, 3)
wt = rep(0, 2)
wt[1] = ifelse(last(sub_price) > sma, 1, 0)
wt[2] = 1 - wt[1]
wts[[i]] = xts(t(wt), order.by = index(rets[ep[i]]))
sma = mean(sub_price)
wt = rep(0, 2)
wt[1] = ifelse(last(sub_price) > sma, 1, 0)
wt[2] = 1 - wt[1]
wts[[i]] = xts(t(wt), order.by = index(rets[ep[i]]))
for (i in (lookback+1) : length(ep)) {
sub_price = prices[ep[i-lookback] : ep[i] , 1]
sma = mean(sub_price)
wt = rep(0, 2)
wt[1] = ifelse(last(sub_price) > sma, 1, 0)
wt[2] = 1 - wt[1]
wts[[i]] = xts(t(wt), order.by = index(rets[ep[i]]))
}
wts = do.call(rbind, wts)
Tactical = Return.portfolio(rets, wts, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
turnover = xts(rowSums(abs(Tactical$BOP.Weight -
timeSeries::lag(Tactical$EOP.Weight)),
na.rm = TRUE),
order.by = index(Tactical$BOP.Weight))
chart.TimeSeries(turnover)
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
chart.TimeSeries(turnover)
### 동적 자산배분 백테스트
library(quantmod)
library(PerformanceAnalytics)
library(RiskPortfolios)
library(tidyr)
library(dplyr)
library(ggplot2)
symbols = c('SPY', # 미국 주식
'IEV', # 유럽 주식
'EWJ', # 일본 주식
'EEM', # 이머징 주식
'TLT', # 미국 장기채
'IEF', # 미국 중기채
'IYR', # 미국 리츠
'RWX', # 글로벌 리츠
'GLD', # 금
'DBC'  # 상품
)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
ep = endpoints(rets, on = 'months')
wts = list()
lookback = 12
wt_zero = rep(0, 10) %>% setNames(colnames(rets))
for (i in (lookback+1) : length(ep)) {
sub_ret = rets[ep[i-lookback] : ep[i] , ]
cum = Return.cumulative(sub_ret)
K = rank(-cum) <= 5
covmat = cov(sub_ret[, K])
wt = wt_zero
wt[K] = optimalPortfolio(covmat,
control = list(type = 'minvol',
constraint = 'user',
LB = rep(0.10, 5),
UB = rep(0.30, 5)))
wts[[i]] = xts(t(wt), order.by = index(rets[ep[i]]))
}
wts = do.call(rbind, wts)
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분') +
par(family = 'AppleGothic')
GDAA = Return.portfolio(rets, wts, verbose = TRUE)
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분') +
par(family = 'AppleGothic')
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분')# +
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분')# +
GDAA = Return.portfolio(rets, wts, verbose = TRUE)
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분')
chart.TimeSeries(turnover)
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분')
wts %>% fortify.zoo() %>%
gather(key, value, -Index) %>%
mutate(Index = as.Date(Index)) %>%
mutate(key = factor(key, levels = unique(key))) %>%
ggplot(aes(x = Index, y = value)) +
geom_area(aes(color = key, fill = key),
position = 'stack') +
xlab(NULL) + ylab(NULL) +  theme_bw() +
scale_x_date(date_breaks="years", date_labels="%Y",
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(hjust = 0.5,
size = 12),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x = element_text(angle = 45,
hjust = 1, size = 8),
panel.grid.minor.x = element_blank()) +
guides(color = guide_legend(byrow = TRUE))
GDAA$turnover = xts(
rowSums(abs(GDAA$BOP.Weight -
timeSeries::lag(GDAA$EOP.Weight)),
na.rm = TRUE),
order.by = index(GDAA$BOP.Weight))
chart.TimeSeries(GDAA$turnover)
fee = 0.0030
GDAA$net = GDAA$returns - GDAA$turnover*fee
cbind(GDAA$returns, GDAA$net) %>%
setNames(c('No Fee', 'After Fee')) %>%
charts.PerformanceSummary(main = 'GDAA')
# 성과 및 위험 평가 ----
library(dplyr)
library(readxl)
library(xts)
library(timetk)
url = 'https://images.aqr.com/-/media/AQR/Documents/Insights/Data-Sets/Quality-Minus-Junk-Factors-Monthly.xlsx'
tf = tempfile(fileext = '.xlsx')
download.file(url, tf, mode = 'wb')
excel_sheets(tf)
df_QMJ = read_xlsx(tf, sheet = 'QMJ Factors', skip = 18) %>%
select(DATE, Global)
df_MKT = read_xlsx(tf, sheet = 'MKT', skip = 18) %>%
select(DATE, Global)
df_SMB = read_xlsx(tf, sheet = 'SMB', skip = 18) %>%
select(DATE, Global)
df_HML_Devil = read_xlsx(tf, sheet = 'HML Devil',
skip = 18) %>%
select(DATE, Global)
df_UMD = read_xlsx(tf, sheet = 'UMD', skip = 18) %>%
select(DATE, Global)
df_RF = read_xlsx(tf, sheet = 'RF', skip = 18)
df_RF
df = Reduce(function(x, y) inner_join(x, y, by = 'DATE'),
list(df_QMJ, df_MKT, df_SMB,
df_HML_Devil,df_UMD, df_RF)) %>%
setNames(c('DATE','QMJ', 'MKT', 'SMB',
'HML', 'UMD', 'RF')) %>%
na.omit() %>%
mutate(DATE = as.Date(DATE, "%m/%d/%Y"),
R_excess = QMJ - RF,
Mkt_excess = MKT - RF) %>%
tk_xts(date_var = DATE)
df
### 결과측정 지표
# 수익률 및 변동성
library(PerformanceAnalytics)
chart.CumReturns(df$QMJ)
charts.PerformanceSummary(main = 'GDAA')
cbind(GDAA$returns, GDAA$net) %>%
setNames(c('No Fee', 'After Fee')) %>%
charts.PerformanceSummary(main = 'GDAA')
tf
excel_sheets(tf)
getwd()
df_QMJ
df_MKT
chart.TimeSeries(GDAA$turnover)
wts %>% fortify.zoo() %>%
gather(key, value, -Index) %>%
mutate(Index = as.Date(Index)) %>%
mutate(key = factor(key, levels = unique(key))) %>%
ggplot(aes(x = Index, y = value)) +
geom_area(aes(color = key, fill = key),
position = 'stack') +
xlab(NULL) + ylab(NULL) +  theme_bw() +
scale_x_date(date_breaks="years", date_labels="%Y",
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(hjust = 0.5,
size = 12),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x = element_text(angle = 45,
hjust = 1, size = 8),
panel.grid.minor.x = element_blank()) +
guides(color = guide_legend(byrow = TRUE))
charts.PerformanceSummary(GDAA$returns, main = '동적자산배분')
# 포트폴리오 백테스트 ----
### 전통적인 60:40 포트폴리오 백테스트
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
ticker = c('SPY', 'TLT')
getSymbols(ticker)
prices = do.call(cbind,
lapply(ticker, function(x) Ad(get(x))))
rets = Return.calculate(prices) %>% na.omit()
cor(rets)
portfolio = Return.portfolio(R = rets,
weights = c(0.6, 0.4),
rebalance_on = 'years',
verbose = TRUE)
View(portfolio)
View(portfolios)
portfolio =
Return.portfolio(R = rets,
weights = c(0.6, 0.4),
rebalance_on = 'years',
verbose = TRUE)
View(portfolio)
portfolios
portfolio$returns
portfolio$contribution
portfolio$BOP.Weight
View(portfolio)
summarise(portfolio)
portfolio
portfolios
portfolio$BOP.Weight
rets
prices
portfolio$BOP.Value[1]
portfolio$BOP.Value[,1]
portfolio$BOP.Value[,2]
portfolio$returns
portfolio$returns$portfolio.returns
portfolio$contribution$SPY.Adjusted
head(portfolio$contribution$TLT.Adjusted)
round(4, head(portfolio$contribution$TLT.Adjusted))
round( head(portfolio$contribution$TLT.Adjusted, 4))
round( head(portfolio$contribution$TLT.Adjusted))
round( head(portfolio$contribution$TLT.Adjusted), 4)
round( tail(portfolio$contribution$TLT.Adjusted), 4)
round( portfolio$contribution$TLT.Adjusted, 4)
round( tail(portfolio$contribution$TLT.Adjusted, 50), 4)
round( tail(portfolio$contribution$TLT.Adjusted, 200), 4)
round( tail(portfolio$contribution$TLT.Adjusted,1000), 4)
portfolio$returns
tail(portfolio$returns, 1000)
round(tail(portfolio$returns, 1000), 4)
round( tail(portfolio$contribution$TLT.Adjusted,1000), 3)
Return.calculate(portfolio$BOP.Value$SPY.Adjusted)
round(Return.calculate(portfolio$BOP.Value$SPY.Adjusted), 4)
round(tail(Return.calculate(portfolio$BOP.Value$SPY.Adjusted), 1000), 4)
rets
head(rets)
round(tail(Return.calculate(rets$SPY.Adjusted), 1000), 4)
portfolio_show <- cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식가치', '채권가치','가치 합계', '주식비중','채권비중', '주식수익률', '채권수익률',
'주식가치', '채권가치', '가치합계', '주식비중', '채권비중', '최종수익률'))
portfolio_show
View(portfolio_show)
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식가치', '채권가치','가치 합계', '주식비중','채권비중', '주식수익률', '채권수익률',
'주식가치', '채권가치', '가치합계', '주식비중', '채권비중', '최종수익률')), 3)
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식가치', '채권가치','가치합계', '주식비중','채권비중', '주식수익률', '채권수익률',
'주식가치', '채권가치', '가치합계', '주식비중', '채권비중', '수익률')), 3)
cbind(portfolio_show$주식가치, portfolio_show$채권가치, portfolio_show$가치합계, portfolio_show$주식비중, portfolio_show$채권비중, portfolio_show$주식수익률, portfolio_show$채권수익률) %>%
setNames('시작지점')
View(portfolios)
View(portfolio_show)
View(portfolio)
View(portfolio_show)
View(portfolio)
View(prices)
View(portfolio_show)
# Return.portfolio 계산 과정
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식가치(시작)', '채권가치(시작)','가치합계(시작)', '주식비중(시작)','채권비중(시작)',
'일별주식수익률', '일별채권수익률', '주식가치(종료)', '채권가치(종료)', '가치합계(종료)',
'주식비중(시작)', '채권비중(시작)', '최종수익률')), 3)
# Return.portfolio 계산 과정
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식투자금(시작)', '채권가치(시작)','가치합계(시작)', '주식비중(시작)','채권비중(시작)',
'일별주식수익률', '일별채권수익률', '주식가치(종료)', '채권가치(종료)', '가치합계(종료)',
'주식비중(시작)', '채권비중(시작)', '최종수익률')), 3)
# Return.portfolio 계산 과정
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식투자자금(시작)', '채권가치(시작)','가치합계(시작)', '주식비중(시작)','채권비중(시작)',
'일별주식수익률', '일별채권수익률', '주식가치(종료)', '채권가치(종료)', '가치합계(종료)',
'주식비중(시작)', '채권비중(시작)', '최종수익률')), 3)
# Return.portfolio 계산 과정
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식투자금', '채권가치(시작)','가치합계(시작)', '주식비중(시작)','채권비중(시작)',
'일별주식수익률', '일별채권수익률', '주식가치(종료)', '채권가치(종료)', '가치합계(종료)',
'주식비중(시작)', '채권비중(시작)', '최종수익률')), 3)
# Return.portfolio 계산 과정
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('시작주식가치', '채권가치(시작)','가치합계(시작)', '주식비중(시작)','채권비중(시작)',
'일별주식수익률', '일별채권수익률', '주식가치(종료)', '채권가치(종료)', '가치합계(종료)',
'주식비중(시작)', '채권비중(시작)', '최종수익률')), 3)
# Return.portfolio 계산 과정
portfolio_show <- round(cbind(portfolio$BOP.Value$SPY.Adjusted, portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Value$SPY.Adjusted + portfolio$BOP.Value$TLT.Adjusted,
portfolio$BOP.Weight$SPY.Adjusted, portfolio$BOP.Weight$TLT.Adjusted,
(portfolio$EOP.Value$SPY.Adjusted/portfolio$BOP.Value$SPY.Adjusted)-1,
(portfolio$EOP.Value$TLT.Adjusted/portfolio$BOP.Value$TLT.Adjusted)-1,
portfolio$EOP.Value$SPY.Adjusted, portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Value$SPY.Adjusted + portfolio$EOP.Value$TLT.Adjusted,
portfolio$EOP.Weight$SPY.Adjusted, portfolio$EOP.Weight$TLT.Adjusted,
portfolio$returns) %>%
setNames(c('주식시작가치', '채권시작가치','시작가치합계', '주식시작비중','채권시작비중',
'일별주식수익률', '일별채권수익률', '주식종료가치', '채권종료가치', '가치종료합계',
'주식종료비중', '채권종료비중', '최종수익률')), 3)
portfolios = cbind(rets, portfolio$returns) %>%
setNames(c('주식', '채권', '60대 40'))
portfolio$BOP.Weight
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오')+
par(family='AppleGothic')
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오')
charts.PerformanceSummary(portfolios,
main = '60대 40 포트폴리오')
turnover = xts(
rowSums(abs(portfolio$BOP.Weight -
timeSeries::lag(portfolio$EOP.Weight)),
na.rm = TRUE),
order.by = index(portfolio$BOP.Weight))
chart.TimeSeries(turnover)
