},options = list(lengthMenu = c(5, 10, 15), pageLength = 5,scrollX=T))
output$downloadPlot <- downloadHandler(
filename = "Shinyplot.png",
content = function(file) {
png(file)
Exportplot()
dev.off()
})
output$MissingPattern<-renderPlot({
DF<-DataTypeConversion()
aggr(DF, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
})
output$CorPlot<-renderPlot(if(input$Go1){
DF<-DataTypeConversion()
M <- cor(na.omit(DF[, sapply(DF, is.numeric)]))
row_indic <- apply(M, 1, function(x) sum(x > input$CorRange[2] | x < input$CorRange[1]) > 1)
correlations<- M[row_indic ,row_indic ]
corrplot(correlations, method="number")
})
output$ScatterAllPairs<-renderPlot({
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = "Plot will be displayed..Kindly wait")
DF<-DataTypeConversion()
pairs(DF[, sapply(DF, is.numeric)],
main="Simple Scatterplot Matrix")
})
output$ScatterSinglePair<-renderPlotly(if(input$PlotType=="Scatter"){
DF<-DataTypeConversion()
ggplot(DF, aes_string(x=input$Xaxis, y=input$Yaxis)) +
geom_jitter(size=2)+ xlab(paste(input$Xaxis))+ylab(input$Yaxis)+geom_smooth(method = lm )+
ggtitle(paste(input$Xaxis," Vs ",input$Yaxis))+theme(plot.title = element_text(size = 15, face = "bold"),axis.title = element_text(face="bold",size=12),
axis.text.x  = element_text(vjust=0.5, size=10,face="bold"),axis.text.y  = element_text(size=10,face="bold"),legend.text=element_text(size=12))
})
output$Hist<-renderPlotly(if(input$PlotType=="Histogram"){
DF<-DataTypeConversion()
H <- hist(DF[,input$HistParam], plot = FALSE)
minimum<-min(H$breaks,na.rm=TRUE)
maximum<-max(H$breaks,na.rm=TRUE)
step<-H$breaks[2]-H$breaks[1]
ggplot(DF,aes_string(x=input$HistParam)) +
stat_bin(binwidth=step,colour="blue",fill="pink") +
stat_bin(binwidth=step, geom="text", aes(label=scales::percent((..count../sum(..count..)))), vjust=-1.5)+
scale_x_continuous(breaks=seq(minimum,maximum, by=step))+theme_bw()
})
output$BoxPlot<-renderPlotly(if(input$PlotType=="Box"){
DF<-DataTypeConversion()
ggplot(DF,aes_string(x=input$GrByBoxs,y=input$BoxParam,fill=input$GrByBoxs)) +geom_boxplot()+theme_bw()
})
output$tabPlot<-renderPlot(if(input$Go1 & input$PlotType=="Tabular"){
DF<-DataTypeConversion()
tableplot(DF,select_string =isolate(input$SelectTabPlot),sortCol=isolate(input$SortTabPlot),from=as.numeric(isolate(input$FilterTabPlot[1])),to=as.numeric(isolate(input$FilterTabPlot[2])))
})
output$MosaicPlot<-renderPlot(if(input$PlotType=="Mosaic"){
DF<-DataTypeConversion()
x<-table(DF[,input$Mosaic1st],DF[,input$Mosaic2nd])
mosaicplot(x,shade=T,legend=T,xlab = input$Mosaic1st, ylab = input$Mosaic2nd,main ="")
})
output$AssocPlot<-renderPlot(if(input$PlotType=="Mosaic"){
DF<-DataTypeConversion()
x<-table(DF[,input$Mosaic1st],DF[,input$Mosaic2nd])
assoc(x,xlab = input$Mosaic1st,ylab = input$Mosaic2nd,main ="",shade=T)
})
# tablePlot
output$Plots<-renderUI({
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = "Processing is going on..Kindly wait")
if(input$PlotType=="Box"){
box(uiOutput("BoxParams"),
uiOutput("GrByBox"),
plotlyOutput("BoxPlot",height=520,width=1200),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Histogram"){
box(uiOutput("HistParams"),
plotlyOutput("Hist",height=520,width=1200),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Scatter"){
box(uiOutput("XaxisTypes"),
uiOutput("YaxisTypes"),
plotlyOutput("ScatterSinglePair",height=520,width=1200),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Tabular"){
box(uiOutput("SelectTabPlots"),
uiOutput("SortTabPlots"),
uiOutput("FilterTabPlots"),
fluidRow(column(6,actionButton("Go1", "Plot"))),
plotOutput("tabPlot",height=500,width=1200),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Scatter Matrix"){
box(
fluidRow(plotOutput("ScatterAllPairs",height=1000,width=1000)),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Correlation"){
box(uiOutput("CorRanges"),
fluidRow(column(6,actionButton("Go1", "Plot"))),
plotOutput("CorPlot",height=1000,width=1000),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Missing"){
box(
plotOutput("MissingPattern",height=500,width=1200),title="",status = "primary",width=100,solidHeader = T)
}else if(input$PlotType=="Mosaic"){
box(uiOutput("MosaicFirst"),
uiOutput("MosaicSecond"),
plotOutput("MosaicPlot",height=500,width=1200),
plotOutput("AssocPlot",height=500,width=1200),title="",status = "primary",width=100,solidHeader = T)
}else {}
})
})
ui<-dashboardPage(
dashboardHeader(title = "비정형데이터분석 20154620 이제완",titleWidth=430),
dashboardSidebar(disable=TRUE,
tags$style(HTML(".sidebar { height: 110vh; overflow-y: auto; }" ))),
dashboardBody(useShinyjs(),
extendShinyjs(text = jsResetCode),
tags$style(
type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
tabsetPanel(
tabPanel("Data",fluidRow(column(6,isolate(uiOutput("FileUpload1"))))),
tabPanel("Explore",uiOutput("ExploreWay"),
fluidRow(column(6,actionButton("Go", "Process"))),
verbatimTextOutput("Summary")),
tabPanel("Plots",
uiOutput("PlotTypes"),
uiOutput("Plots")),
tabPanel("Run and Tune Model",
fluidRow(column(4,box(
verbatimTextOutput("GuideTrain"),
uiOutput("FileUpload3"),
uiOutput("Targets"),
uiOutput("NumPredictors"),
uiOutput("Predictors"),
uiOutput("MetricTypes"),
uiOutput("NumFolds"),
uiOutput("MLTS"),
uiOutput("Tunings"),
uiOutput("TuningTypes"),
uiOutput("TuneLength"),
actionButton("Go2", "Process"),width=10)),
uiOutput("RegTun"),
uiOutput("DtTun"),
uiOutput("RFTun"),
uiOutput("XgbTun"),
uiOutput("GbmTun"),
uiOutput("SvmTun")),
verbatimTextOutput("Model")),
tabPanel("Prediction",
verbatimTextOutput("TestUploadRules"),
uiOutput("FileUpload2"),
uiOutput("PredictMLTS"),
actionButton("Go3", "Predict"),
dataTableOutput("PredictModel")))
)
)
shinyApp(ui = ui, server = server)
ui<-dashboardPage(
dashboardHeader(title = "RShiny&ML 이제완",titleWidth=430),
dashboardSidebar(disable=TRUE,
tags$style(HTML(".sidebar { height: 110vh; overflow-y: auto; }" ))),
dashboardBody(useShinyjs(),
extendShinyjs(text = jsResetCode),
tags$style(
type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
tabsetPanel(
tabPanel("Data",fluidRow(column(6,isolate(uiOutput("FileUpload1"))))),
tabPanel("Explore",uiOutput("ExploreWay"),
fluidRow(column(6,actionButton("Go", "Process"))),
verbatimTextOutput("Summary")),
tabPanel("Plots",
uiOutput("PlotTypes"),
uiOutput("Plots")),
tabPanel("Run and Tune Model",
fluidRow(column(4,box(
verbatimTextOutput("GuideTrain"),
uiOutput("FileUpload3"),
uiOutput("Targets"),
uiOutput("NumPredictors"),
uiOutput("Predictors"),
uiOutput("MetricTypes"),
uiOutput("NumFolds"),
uiOutput("MLTS"),
uiOutput("Tunings"),
uiOutput("TuningTypes"),
uiOutput("TuneLength"),
actionButton("Go2", "Process"),width=10)),
uiOutput("RegTun"),
uiOutput("DtTun"),
uiOutput("RFTun"),
uiOutput("XgbTun"),
uiOutput("GbmTun"),
uiOutput("SvmTun")),
verbatimTextOutput("Model")),
tabPanel("Prediction",
verbatimTextOutput("TestUploadRules"),
uiOutput("FileUpload2"),
uiOutput("PredictMLTS"),
actionButton("Go3", "Predict"),
dataTableOutput("PredictModel")))
)
)
shinyApp(ui = ui, server = server)
ui<-dashboardPage(
dashboardHeader(title = "RShiny 이제완",titleWidth=430),
dashboardSidebar(disable=TRUE,
tags$style(HTML(".sidebar { height: 110vh; overflow-y: auto; }" ))),
dashboardBody(useShinyjs(),
extendShinyjs(text = jsResetCode),
tags$style(
type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
tabsetPanel(
tabPanel("Data",fluidRow(column(6,isolate(uiOutput("FileUpload1"))))),
tabPanel("Explore",uiOutput("ExploreWay"),
fluidRow(column(6,actionButton("Go", "Process"))),
verbatimTextOutput("Summary")),
tabPanel("Plots",
uiOutput("PlotTypes"),
uiOutput("Plots")),
tabPanel("Run and Tune Model",
fluidRow(column(4,box(
verbatimTextOutput("GuideTrain"),
uiOutput("FileUpload3"),
uiOutput("Targets"),
uiOutput("NumPredictors"),
uiOutput("Predictors"),
uiOutput("MetricTypes"),
uiOutput("NumFolds"),
uiOutput("MLTS"),
uiOutput("Tunings"),
uiOutput("TuningTypes"),
uiOutput("TuneLength"),
actionButton("Go2", "Process"),width=10)),
uiOutput("RegTun"),
uiOutput("DtTun"),
uiOutput("RFTun"),
uiOutput("XgbTun"),
uiOutput("GbmTun"),
uiOutput("SvmTun")),
verbatimTextOutput("Model")),
tabPanel("Prediction",
verbatimTextOutput("TestUploadRules"),
uiOutput("FileUpload2"),
uiOutput("PredictMLTS"),
actionButton("Go3", "Predict"),
dataTableOutput("PredictModel")))
)
)
shinyApp(ui = ui, server = server)
library("car")
data <- read.csv('test.csv', header = T, fileEncoding = 'euc-kr')
data
data <- read.csv('test.csv', header = T, fileEncoding = 'euc-kr')
data <- read.csv('test.csv', header = T, fileEncoding = 'euc-kr-sig')
install.packages('installr')
install.packages('installr')
# ses() 1996년부터
library(fpp2)
oil
oil_train.ts <- window(oil, start=1965, end=2000)
oil_train.ts
oil_train <- window(oil, start=1965, end=2000)
oil_train
oil_test <- window(oil, start=2001, end=2013)
plot(oil_test)
# alpha: optimal 적용
oil_fit_train <- ses(oil_train, initial = 'simple')
oil_fit_test <- ses(oil_test, initial = 'simple')
summary(oil_fit_train)
summary(oil_fit_test)
ausair
####
oil_train <- window(oil, start= 1965, end=2000)
oil_test <- window(oil, start=2001, end=2013)
air_train <- window(ausair, start=1975, end=2005)
air_test <- window(ausair, start=2006, end=2016)
aus_train <- window(austourists, start=2000, end=2014)
aus_test <- window(austourists, start=2015)
aus_test
plot(aus_test)
aus_test <- window(austourists, start=c(2015,1), end=c(2015, 4)
plot(aus_test)
aus_test <- window(austourists, start=c(2015,1), end=c(2015, 4))
plot(aus_test)
####
oil_train <- window(oil, start= 1965, end=2000)
oil_test <- window(oil, start=2001, end=2013)
air_train <- window(ausair, start=1975, end=2005)
air_test <- window(ausair, start=2006, end=2016)
aus_train <- window(austourists, start=c(2000, 1), end=c(2014, 4))
aus_test <- window(austourists, start=c(2015,1), end=c(2015, 4))
# ses()
oil_train_fit <- ses(oil_train, initial = 'simple')
oil_test_fit <- ses(oil_test, initial = 'simple')
plot(oil_train_fit, xlab="Time", ylab="production")
plot(oil_test_fit, xlab="Time", ylab="production")
## ses vs ETS
#ann
oil_train_ets <- ets(oil)
# 추세와 계절성도 없기 때문에
autoplot(oil_train_ets)
# 추세와 계절성도 없기 때문에
oil_train_ets_fore <- forecast(oil_train_ets, h=13)
summary(oil_ann_ets_fore)
summary(oil_train_ets_fore)
plot(oil_train_ets_fore, xlab="Time", ylab="production")
lines(fitted(oil_train_ets_fore), type = 'o', col = 'red')
summary(oil_train_ets_fore)
#ann
oil_train_ets <- ets(oil_train)
# 추세와 계절성도 없기 때문에
oil_train_ets_fore <- forecast(oil_train_ets, h=13)
summary(oil_train_ets_fore)
# holt()
air_holt_train <- holt(air_train, h=11)
summary(air_holt_train)
air_holt_train
air_train
plot(air_train)
air_holt_damped <- holt(air_train, damped = TRUE, h=11)
summary(air_holt_damped) # 2.285529
## holt vs ETS
# man
air_ets_damp <- ets(air_train, damped = FALSE)
## holt vs ETS
# man
air_ets <- ets(air_train, damped = FALSE)
autoplot(air_ets_man)
air_ets_fore <- forecast(air_ets, h=11) #예측
summary(air_ets_fore)
#### hw()
fit_austourists_mul <- hw(aus_train, seasonal = 'multiplicative', h = 4)
summary(fit_austourists_mul)
## hw vs ETS
#aaa
austourists_ets <- ets(austourists_data)
## hw vs ETS
#aaa
aus_ets <- ets(aus_train)
aus_ets_fore <- forecast(aus_ets, h=4) #예측
summary(austourists_ets_fore)
summary(aus_ets_fore)
air_ets_fore
air_holt
plot(air_train)
plot(air__holttrain)
plot(air__holt_train)
plot(air_holt_train)
summary(air_holt_train)
# holt ets
accuracy(air_holt_train, testdata)
# ses ets
accuracy(oil_train_fit, oil_test)
accuracy(oil_train_ets_fore, oil_test)
# holt ets
accuracy(air_holt_train, air_test)
accuracy(air_ets_fore, air_test)
# hw ets
accuracy(for_ets, aus_test)
accuracy(for_hw, aus_test)
# hw ets
accuracy(fit_austourists_mul, aus_test)
accuracy(aus_ets, aus_test)
# hw ets
accuracy(fit_austourists_mul, aus_test)
accuracy(aus_ets_fore, aus_test)
KOR_price[,invest_qvm]
library(xts)
library(stringr)
KOR_fs = readRDS('data/KOR_fs.Rds')
KOR_value = read.csv('data/KOR_value.csv', row.names = 1,
stringsAsFactors = FALSE)
KOR_fs = readRDS('data/KOR_fs.Rds')
# new
oil_train <- window(oil, start= 1965, end=2000)
oil_test <- window(oil, start=2001, end=2013)
# ses() 1996년부터
library(fpp2)
# new
oil_train <- window(oil, start= 1965, end=2000)
oil_test <- window(oil, start=2001, end=2013)
air_train <- window(ausair, start=1975, end=2005)
air_test <- window(ausair, start=2006, end=2016)
aus_train <- window(austourists, start=c(2000, 1), end=c(2014, 4))
aus_test <- window(austourists, start=c(2015,1), end=c(2015, 4))
# oil
library(fpp2)
plot(oil)
oil_train <- window(oil, start= 1965, end=2000)
oil_test <- window(oil, start=2001, end=2013)
# 4/8 ----
library(forecast)
ma.ts<- ts(c(20, 10, 30, 35, 10, 60, 50, 40, 90, 65, 55, 120), frequency = 1)
ma.ts
ma(ma.ts, order = 3)
ma(ma.ts, order = 4, centre = FALSE)
ma(ma.ts, order = 4, centre = TRUE)
library(TTR)
sma(ma.ts, n=3)
SMA(ma.ts, n=3)
library(fpp2)
elecsales
plot(elecsales)
elecsales.ma <- ma(elecsales, order = 5)
elecsales.ma <- ma(elecsales, order = 3)
elecsales.ma <- ma(elecsales, order = 5)
elecsales.ma <- ma(elecsales, order = 7)
elecsales.ma_3 <- ma(elecsales, order = 3)
elecsales.ma_5 <- ma(elecsales, order = 5)
elecsales.ma_7 <- ma(elecsales, order = 7)
elecsales.ma_9 <- ma(elecsales, order = 9)
elecsales.ma <- ma(elecsales, order = 5)
elecsales.ma_3 <- ma(elecsales, order = 3)
elecsales.ma_5 <- ma(elecsales, order = 5)
elecsales.ma_7 <- ma(elecsales, order = 7)
elecsales.ma_9 <- ma(elecsales, order = 9)
plot(elecsales)
lines(elecsales.ma, col='red')
plot(elecsales)
lines(elecsales.ma_3, col='red')
lines(elecsales.ma_5, col='blue')
lines(elecsales.ma_7, col='purple')
lines(elecsales.ma_9, col='grey')
beer2 <- window(ausbeer, start=1992)
plot(beer2)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2X4 <- ma(beer2, order=4, centre=TRUE)
plot(beer2)
lines(ma4, col="red")
lines(ma2X4, col="blue")
elecequlp.ma <- ma(elecequlp, 12)
elecquip.ma <- ma(elecequip, 12)
plot(elecquip)
elecequip.ma <- ma(elecequip, 12)
plot(elecequip)
lines(elecequip.ma, col = 'red', iwd=4)
lines(elecequip.ma, col = 'red', lwd=4)
elecequip.de <- decompose(elecequip, type='additive')
elecequip.de <- decompose(elecequip, type='additive')
elecequip.de
names(elecquip.de)
names(elecqeuip.de)
names(elecequip.de)
elecequip.de$x
plot(elecequip.de$x)
plot(elecequip.de$seasonal)
plot(elecequip.de$trend)
plot(elecequip.de$random)
plot(elecequip.de$figure)
plot(elecequip.de$seasonal) # 계절성분
plot(elecequip.de$random) # 불규칙 성분
plot(elecequip.de$figure)
elecequip.de$figure
plot(elecequip.de$type)
elecequip.de$type
elecequip.de$figure
install.packages('dtwclust')
library(dtwclust)
data("uciCT")
pc <- tsclust(CharTraj, type = "partitional", k = 20L,
distance = "dtw_basic", centroid = "pam",
seed = 3247L, trace = TRUE,
args = tsclust_args(dist = list(window.size = 20L)))
plot(pc)
hc <- tsclust(CharTraj, type = "hierarchical", k = 20L,
distance = "sbd", trace = TRUE,
control = hierarchical_control(method = "average"))
plot(hc)
# Calculate autocorrelation up to 50th lag, considering a list of time series as input
acf_fun <- function(series, ...) {
lapply(series, function(x) { as.numeric(acf(x, lag.max = 50L, plot = FALSE)$acf) })
}
# Autocorrelation-based fuzzy c-means
fc <- tsclust(CharTraj[1L:25L], type = "fuzzy", k = 5L,
preproc = acf_fun, distance = "L2",
seed = 123L)
fc
# Multivariate series provided as a list of matrices, using GAK distance
mvc <- tsclust(CharTrajMV[1L:20L], k = 4L, distance = "gak", seed = 390L)
# Note how the variables of each series are appended one after the other in the plot
plot(mvc, labels = list(nudge_x = -10, nudge_y = 1))
## cran ----
library(cran)
## dtwclust----
library(dtwclust)
data("uciCT")
## dtwclust----
library(dtwclust)
data("uciCT")
glimpse(CharTraj)
glimpse(CharTraj)
setwd('/Users/wan/GitHub/Portfolio_Optimization/R')
# 포트폴리오 백테스트 ----
### 전통적인 60:40 포트폴리오 백테스트
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
glimpse(CharTraj)
library(fpp2)
glimpse(CharTraj)
library(quantmod)
library(PerformanceAnalytics)
library(RiskPortfolios)
library(tidyr)
library(dplyr)
library(ggplot2)
glimpse(CharTraj)
pc <- tsclust(CharTraj, type = "partitional", k = 20L,
distance = "dtw_basic", centroid = "pam",
seed = 3247L, trace = TRUE,
args = tsclust_args(dist = list(window.size = 20L)))
plot(pc)
CharTraj
glimpse(CharTraj)
